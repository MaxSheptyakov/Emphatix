from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from localization import _

def create_keyboard(buttons, row_width=1, with_main=False, with_back_button=False, one_time=False, with_skip=False,
                    with_add_variant=False, with_dont_know=False, resize_keyboard=True):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=resize_keyboard, row_width=row_width, one_time_keyboard=one_time)
    buttons = buttons if isinstance(buttons, list) else [buttons]
    if with_dont_know:
        buttons.append(dont_know_button)
    if with_add_variant:
        buttons.append(add_variant_button)
    if with_back_button:
        buttons.append(back_button)
    if with_skip:
        buttons.append(skip_button)
    if with_main:
        buttons.append(main_page_button)
    if isinstance(buttons, list):
        keyboard.add(*buttons)
    else:
        keyboard.add(buttons)
    return keyboard

"""Home keyboard"""
main_page_button = _('üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é')
description_button = _('ü§ñ–û –±–æ—Ç–µ')
questionnaire_button = _('üìù–ê–Ω–∫–µ—Ç–∞')
settings_button = _('‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
emotions_gather_button = _('‚úÖÔ∏è–û—Ç–º–µ—Ç–∏—Ç—å —ç–º–æ—Ü–∏—é')
emotions_gather_old_button = _('‚úîÔ∏è–û—Ç–º–µ—Ç–∏—Ç—å —ç–º–æ—Ü–∏—é')
do_not_want_button = _('üö´–°–µ–π—á–∞—Å –Ω–µ —Ö–æ—á—É')

emotions_recap_button = _("üìÑ–°–ø–∏—Å–æ–∫ —ç–º–æ—Ü–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥")
report_button = _("üìà–û—Ç—á—ë—Ç –ø–æ —ç–º–æ—Ü–∏—è–º")
triggers_report_button = _('‚≠ï–û—Ç—á—ë—Ç –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º')
feedback_button = _('üí¨–û—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫')
get_weekly_report_button = _("üìä–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é")

back_button = _('‚Ü©Ô∏è–ù–∞–∑–∞–¥')
skip_button = _('‚è≠Ô∏è–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
ok_button = _("üëå–•–æ—Ä–æ—à–æ")
continue_button = _("‚û°Ô∏è–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
add_variant_button = _("–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
dont_know_button = _('–ù–µ –∑–Ω–∞—é')

# buy_pro_button = _("üóùÔ∏è–ö—É–ø–∏—Ç—å PRO –≤–µ—Ä—Å–∏—é")
# try_pro_button = _('üóùÔ∏è–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å PRO –≤–µ—Ä—Å–∏—é')

home_buttons = [emotions_gather_button, report_button,
                  emotions_recap_button, triggers_report_button,
                  description_button, settings_button, feedback_button]
home_keyboard = create_keyboard(home_buttons, row_width=2)


"""Quantity keyboard"""
quantity_buttons = [_('–í—Å–µ–≥–¥–∞'), _('–í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤'), _("–ò–Ω–æ–≥–¥–∞"), _('–†–µ–¥–∫–æ'), _('–ù–∏–∫–æ–≥–¥–∞')]
quantity_keyboard = create_keyboard(quantity_buttons)


"""Yes no keyboard"""
yes_button = _('–î–∞')
no_button = _('–ù–µ—Ç')
yes_no_buttons = [no_button, yes_button]
yes_no_keyboard = create_keyboard(yes_no_buttons)



"""1-10 rating keyboard"""
rating_buttons = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']
rating_keyboard = create_keyboard(rating_buttons, row_width=5)


"""1-10 intencity keyboard"""
intensity_buttons = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']
intensity_keyboard = create_keyboard(intensity_buttons, row_width=5)


def create_inline_button(x, default_callback=None):
    if default_callback is not None:
        return InlineKeyboardButton(x, callback_data=f"{default_callback}:{x}")
    return InlineKeyboardButton(x, callback_data=f"{x}")

def create_inline_keyboard(buttons, row_width=1, with_main=False, with_back_button=False, one_time=False, with_skip=False,
                    with_add_variant=False, with_dont_know=False, resize_keyboard=True, default_callback_part=None):
    keyboard = InlineKeyboardMarkup(resize_keyboard=resize_keyboard, row_width=row_width, one_time_keyboard=one_time)
    buttons = [create_inline_button(x, default_callback_part)
               for x in (buttons if isinstance(buttons, list) else [buttons])]
    if with_dont_know:
        buttons.append(create_inline_button(dont_know_button, default_callback_part))
    if with_add_variant:
        buttons.append(create_inline_button(add_variant_button, default_callback_part))
    if with_back_button:
        buttons.append(create_inline_button(back_button, default_callback_part))
    if with_skip:
        buttons.append(create_inline_button(skip_button, default_callback_part))
    if with_main:
        buttons.append(create_inline_button(main_page_button, default_callback_part))
    if isinstance(buttons, list):
        keyboard.add(*buttons)
    else:
        keyboard.add(buttons)
    return keyboard


reaction_buttons = [_('ü§ó'), _('‚ù§Ô∏è'), _('üòê'), _('‚õî'), ]
reaction_keyboard = create_inline_keyboard(reaction_buttons, row_width=4)
